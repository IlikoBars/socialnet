üèóÔ∏è –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –ü—Ä–æ–µ–∫—Ç–∞ "–ì–æ—Ä–æ–¥"

## –û–±–∑–æ—Ä –°–∏—Å—Ç–µ–º—ã

"–ì–æ—Ä–æ–¥" - —ç—Ç–æ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è —Å–æ—Ü–∏–∞–ª—å–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞, –ø–æ—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –Ω–∞ –ø—Ä–∏–Ω—Ü–∏–ø–∞—Ö –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã —Å –∞–∫—Ü–µ–Ω—Ç–æ–º –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –æ–ø—ã—Ç.

```
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ   Frontend      ‚îÇ    ‚îÇ    Backend      ‚îÇ    ‚îÇ   Database      ‚îÇ
‚îÇ   (Next.js)     ‚îÇ‚óÑ‚îÄ‚îÄ‚ñ∫‚îÇ   (FastAPI)     ‚îÇ‚óÑ‚îÄ‚îÄ‚ñ∫‚îÇ  (PostgreSQL)   ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
         ‚îÇ                       ‚îÇ                       ‚îÇ
         ‚îÇ                       ‚îÇ                       ‚îÇ
         ‚ñº                       ‚ñº                       ‚ñº
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ   CDN/Images    ‚îÇ    ‚îÇ   Cache Layer   ‚îÇ    ‚îÇ   File Storage  ‚îÇ
‚îÇ   (Vercel)      ‚îÇ    ‚îÇ   (Redis)       ‚îÇ    ‚îÇ   (Local/S3)    ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
```

## Frontend –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞

### –°—Ç—Ä—É–∫—Ç—É—Ä–∞ (Atomic Design)

```
frontend/
‚îú‚îÄ‚îÄ app/                          # Next.js 15 App Router
‚îÇ   ‚îú‚îÄ‚îÄ layout.tsx               # –ö–æ—Ä–Ω–µ–≤–æ–π layout
‚îÇ   ‚îú‚îÄ‚îÄ page.tsx                 # –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
‚îÇ   ‚îú‚îÄ‚îÄ map/                     # –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–∞—Ä—Ç—ã
‚îÇ   ‚îú‚îÄ‚îÄ vibes/                   # –°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π
‚îÇ   ‚îî‚îÄ‚îÄ globals.css              # –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏
‚îú‚îÄ‚îÄ components/                   # Atomic Design –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
‚îÇ   ‚îú‚îÄ‚îÄ atoms/                   # –ê—Ç–æ–º—ã (–±–∞–∑–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã)
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Button.tsx
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Input.tsx
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Avatar.tsx
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ MeoFusciuniImage.tsx
‚îÇ   ‚îú‚îÄ‚îÄ molecules/               # –ú–æ–ª–µ–∫—É–ª—ã (—Å–æ—Å—Ç–∞–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã)
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ PostCard.tsx
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ DistrictCard.tsx
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ Navigation.tsx
‚îÇ   ‚îî‚îÄ‚îÄ organisms/               # –û—Ä–≥–∞–Ω–∏–∑–º—ã (—Å–ª–æ–∂–Ω—ã–µ –±–ª–æ–∫–∏)
‚îÇ       ‚îú‚îÄ‚îÄ CityMap.tsx
‚îÇ       ‚îú‚îÄ‚îÄ LiveCommunityFeed.tsx
‚îÇ       ‚îî‚îÄ‚îÄ FreePhotoGallery.tsx
‚îú‚îÄ‚îÄ hooks/                       # –ö–∞—Å—Ç–æ–º–Ω—ã–µ React —Ö—É–∫–∏
‚îÇ   ‚îú‚îÄ‚îÄ useIsMobile.ts
‚îÇ   ‚îú‚îÄ‚îÄ useInfinitePosts.ts
‚îÇ   ‚îî‚îÄ‚îÄ useSidebar.ts
‚îú‚îÄ‚îÄ utils/                       # –£—Ç–∏–ª–∏—Ç—ã –∏ —Ö–µ–ª–ø–µ—Ä—ã
‚îÇ   ‚îú‚îÄ‚îÄ photoSources.ts
‚îÇ   ‚îú‚îÄ‚îÄ imageProcessor.ts
‚îÇ   ‚îî‚îÄ‚îÄ lookbookUtils.ts
‚îú‚îÄ‚îÄ data/                        # –¢–∏–ø—ã –∏ –º–æ–∫ –¥–∞–Ω–Ω—ã–µ
‚îÇ   ‚îú‚îÄ‚îÄ types.ts
‚îÇ   ‚îî‚îÄ‚îÄ districtData.ts
‚îî‚îÄ‚îÄ styles/                      # –°—Ç–∏–ª–∏ –∏ —Ç–µ–º—ã
    ‚îî‚îÄ‚îÄ globals.css
```

### –ö–ª—é—á–µ–≤—ã–µ –ü—Ä–∏–Ω—Ü–∏–ø—ã

#### 1. Atomic Design
- **–ê—Ç–æ–º—ã**: –ë–∞–∑–æ–≤—ã–µ UI —ç–ª–µ–º–µ–Ω—Ç—ã (–∫–Ω–æ–ø–∫–∏, –∏–Ω–ø—É—Ç—ã, –∞–≤–∞—Ç–∞—Ä—ã)
- **–ú–æ–ª–µ–∫—É–ª—ã**: –°–æ—Å—Ç–∞–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã (–∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ—Å—Ç–æ–≤, –Ω–∞–≤–∏–≥–∞—Ü–∏—è)
- **–û—Ä–≥–∞–Ω–∏–∑–º—ã**: –°–ª–æ–∂–Ω—ã–µ –±–ª–æ–∫–∏ (–∫–∞—Ä—Ç–∞ –≥–æ—Ä–æ–¥–∞, –ª–µ–Ω—Ç–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞)
- **–®–∞–±–ª–æ–Ω—ã**: –ú–∞–∫–µ—Ç—ã —Å—Ç—Ä–∞–Ω–∏—Ü
- **–°—Ç—Ä–∞–Ω–∏—Ü—ã**: –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã —à–∞–±–ª–æ–Ω–æ–≤

#### 2. Performance First
```typescript
// Lazy loading –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
const HeavyComponent = dynamic(() => import('./HeavyComponent'), {
  loading: () => <LoadingSpinner />,
  ssr: false
});

// –ú–µ–º–æ–∏–∑–∞—Ü–∏—è
const MemoizedComponent = React.memo(ExpensiveComponent);

// –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
<Image
  src="/photos/photo.jpg"
  alt="Description"
  width={800}
  height={600}
  priority
  placeholder="blur"
/>
```

#### 3. TypeScript First
```typescript
interface PhotoSource {
  id: string;
  src: string;
  title: string;
  author: string;
  district: string;
  likes: number;
  source: 'instagram' | 'telegram';
  tags: string[];
}

interface DistrictStats {
  name: string;
  posts: number;
  likes: number;
  images: number;
  coordinates: {
    lat: number;
    lng: number;
  };
}
```

## Backend –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞

### –°—Ç—Ä—É–∫—Ç—É—Ä–∞ (Clean Architecture)

```
backend/
‚îú‚îÄ‚îÄ app.py                       # –û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ FastAPI
‚îú‚îÄ‚îÄ database.py                  # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
‚îú‚îÄ‚îÄ models.py                    # SQLAlchemy –º–æ–¥–µ–ª–∏
‚îú‚îÄ‚îÄ routes/                      # API –º–∞—Ä—à—Ä—É—Ç—ã
‚îÇ   ‚îú‚îÄ‚îÄ auth.py                 # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
‚îÇ   ‚îú‚îÄ‚îÄ posts.py                # –ü–æ—Å—Ç—ã –∏ –∫–æ–Ω—Ç–µ–Ω—Ç
‚îÇ   ‚îî‚îÄ‚îÄ districts.py            # –î–∞–Ω–Ω—ã–µ —Ä–∞–π–æ–Ω–æ–≤
‚îú‚îÄ‚îÄ schemas/                     # Pydantic —Å—Ö–µ–º—ã
‚îÇ   ‚îú‚îÄ‚îÄ user.py                 # –°—Ö–µ–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚îÇ   ‚îî‚îÄ‚îÄ post.py                 # –°—Ö–µ–º—ã –ø–æ—Å—Ç–æ–≤
‚îú‚îÄ‚îÄ services/                    # –ë–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞
‚îÇ   ‚îú‚îÄ‚îÄ auth_service.py         # –°–µ—Ä–≤–∏—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
‚îÇ   ‚îú‚îÄ‚îÄ post_service.py         # –°–µ—Ä–≤–∏—Å –ø–æ—Å—Ç–æ–≤
‚îÇ   ‚îî‚îÄ‚îÄ image_service.py        # –°–µ—Ä–≤–∏—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
‚îú‚îÄ‚îÄ utils/                       # –£—Ç–∏–ª–∏—Ç—ã
‚îÇ   ‚îú‚îÄ‚îÄ security.py             # –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
‚îÇ   ‚îî‚îÄ‚îÄ validators.py           # –í–∞–ª–∏–¥–∞—Ç–æ—Ä—ã
‚îî‚îÄ‚îÄ requirements.txt             # –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ Python
```

### –ö–ª—é—á–µ–≤—ã–µ –ü—Ä–∏–Ω—Ü–∏–ø—ã

#### 1. RESTful API Design
```python
# –ú–∞—Ä—à—Ä—É—Ç—ã API
@app.get("/api/posts")
async def get_posts(skip: int = 0, limit: int = 10):
    return await post_service.get_posts(skip, limit)

@app.post("/api/posts")
async def create_post(post: PostCreate, current_user: User = Depends(get_current_user)):
    return await post_service.create_post(post, current_user)

@app.get("/api/districts/{district_id}")
async def get_district(district_id: int):
    return await district_service.get_district(district_id)
```

#### 2. Dependency Injection
```python
# –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

def get_current_user(db: Session = Depends(get_db), token: str = Depends(oauth2_scheme)):
    return auth_service.get_current_user(db, token)
```

#### 3. Async/Await Pattern
```python
# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
async def process_image_upload(file: UploadFile):
    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    processed_image = await image_service.process(file)
    return processed_image
```

## –ë–∞–∑–∞ –î–∞–Ω–Ω—ã—Ö

### –°—Ö–µ–º–∞ (PostgreSQL)

```sql
-- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
CREATE TABLE users (
    id SERIAL PRIMARY KEY,
    username VARCHAR(50) UNIQUE NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    password_hash VARCHAR(255) NOT NULL,
    avatar_url VARCHAR(255),
    district_id INTEGER REFERENCES districts(id),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- –†–∞–π–æ–Ω—ã
CREATE TABLE districts (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    description TEXT,
    coordinates POINT NOT NULL,
    boundary_polygon POLYGON,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- –ü–æ—Å—Ç—ã
CREATE TABLE posts (
    id SERIAL PRIMARY KEY,
    user_id INTEGER REFERENCES users(id),
    district_id INTEGER REFERENCES districts(id),
    content_type VARCHAR(20) NOT NULL, -- 'text', 'image', 'video', 'audio'
    content TEXT,
    media_url VARCHAR(255),
    likes_count INTEGER DEFAULT 0,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- –õ–∞–π–∫–∏
CREATE TABLE likes (
    id SERIAL PRIMARY KEY,
    user_id INTEGER REFERENCES users(id),
    post_id INTEGER REFERENCES posts(id),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UNIQUE(user_id, post_id)
);

-- –¢–µ–≥–∏
CREATE TABLE tags (
    id SERIAL PRIMARY KEY,
    name VARCHAR(50) UNIQUE NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- –°–≤—è–∑—å –ø–æ—Å—Ç–æ–≤ –∏ —Ç–µ–≥–æ–≤
CREATE TABLE post_tags (
    post_id INTEGER REFERENCES posts(id),
    tag_id INTEGER REFERENCES tags(id),
    PRIMARY KEY (post_id, tag_id)
);
```

### –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏

```sql
-- –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
CREATE INDEX idx_posts_district_id ON posts(district_id);
CREATE INDEX idx_posts_created_at ON posts(created_at DESC);
CREATE INDEX idx_posts_user_id ON posts(user_id);
CREATE INDEX idx_likes_post_id ON likes(post_id);
CREATE INDEX idx_users_district_id ON users(district_id);

-- –ü–æ–ª–Ω–æ—Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫
CREATE INDEX idx_posts_content_fts ON posts USING gin(to_tsvector('russian', content));
```

## –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏

### 2GIS API
```python
# –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å 2GIS –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –æ –º–µ—Å—Ç–∞—Ö
class TwoGISService:
    def __init__(self, api_key: str):
        self.api_key = api_key
        self.base_url = "https://catalog.api.2gis.com/3.0"
    
    async def get_places(self, query: str, region_id: int = 1):
        params = {
            "q": query,
            "region_id": region_id,
            "key": self.api_key,
            "fields": "items.point,items.name,items.address"
        }
        response = await httpx.get(f"{self.base_url}/items", params=params)
        return response.json()
```

### OpenStreetMap
```python
# –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å OpenStreetMap –¥–ª—è –≥–µ–æ–¥–∞–Ω–Ω—ã—Ö
class OSMService:
    async def get_district_boundaries(self, district_name: str):
        query = f"""
        [out:json][timeout:25];
        area["name"="{district_name}"]["admin_level"="10"]->.searchArea;
        (
          way["boundary"="administrative"](area.searchArea);
        );
        out body;
        >;
        out skel qt;
        """
        response = await httpx.get("https://overpass-api.de/api/interpreter", params={"data": query})
        return response.json()
```

## –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ

### Redis Cache Layer
```python
# –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∞—Å—Ç–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
class CacheService:
    def __init__(self, redis_url: str):
        self.redis = redis.from_url(redis_url)
    
    async def get_cached_posts(self, district_id: int, limit: int = 10):
        cache_key = f"posts:district:{district_id}:limit:{limit}"
        cached_data = await self.redis.get(cache_key)
        
        if cached_data:
            return json.loads(cached_data)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
        posts = await post_service.get_posts_by_district(district_id, limit)
        
        # –ö—ç—à–∏—Ä—É–µ–º –Ω–∞ 5 –º–∏–Ω—É—Ç
        await self.redis.setex(cache_key, 300, json.dumps(posts))
        return posts
```

## –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å

### –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∏ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
```python
# JWT —Ç–æ–∫–µ–Ω—ã
class AuthService:
    def create_access_token(self, data: dict):
        to_encode = data.copy()
        expire = datetime.utcnow() + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)
        to_encode.update({"exp": expire})
        encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)
        return encoded_jwt
    
    def verify_token(self, token: str):
        try:
            payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
            return payload
        except JWTError:
            raise HTTPException(status_code=401, detail="Invalid token")
```

### Rate Limiting
```python
# –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤
from slowapi import Limiter
from slowapi.util import get_remote_address

limiter = Limiter(key_func=get_remote_address)

@app.post("/api/posts")
@limiter.limit("5/minute")  # 5 –ø–æ—Å—Ç–æ–≤ –≤ –º–∏–Ω—É—Ç—É
async def create_post(request: Request, post: PostCreate):
    # –õ–æ–≥–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞
    pass
```

## –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ

### –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
```python
import structlog

logger = structlog.get_logger()

@app.middleware("http")
async def log_requests(request: Request, call_next):
    start_time = time.time()
    response = await call_next(request)
    process_time = time.time() - start_time
    
    logger.info(
        "request_processed",
        method=request.method,
        url=str(request.url),
        status_code=response.status_code,
        process_time=process_time
    )
    
    return response
```

### –ú–µ—Ç—Ä–∏–∫–∏ Prometheus
```python
from prometheus_client import Counter, Histogram

request_count = Counter('http_requests_total', 'Total HTTP requests', ['method', 'endpoint'])
request_latency = Histogram('http_request_duration_seconds', 'HTTP request latency')

@app.middleware("http")
async def add_metrics(request: Request, call_next):
    start_time = time.time()
    response = await call_next(request)
    request_count.labels(method=request.method, endpoint=request.url.path).inc()
    request_latency.observe(time.time() - start_time)
    return response
```

## –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ

### –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
- **Load Balancer**: Nginx –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏
- **Multiple Instances**: –ù–µ—Å–∫–æ–ª—å–∫–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ backend
- **Database Sharding**: –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –ë–î –ø–æ —Ä–∞–π–æ–Ω–∞–º
- **CDN**: Vercel Edge Network –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤

### –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
- **Database Optimization**: –ò–Ω–¥–µ–∫—Å—ã, –∑–∞–ø—Ä–æ—Å—ã, –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
- **Image Processing**: –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
- **Code Splitting**: –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –∫–æ–¥–∞ –Ω–∞ —á–∞–Ω–∫–∏
- **Lazy Loading**: –û—Ç–ª–æ–∂–µ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤

## DevOps Pipeline

### CI/CD (GitHub Actions)
```yaml
name: Deploy to Production

on:
  push:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Run tests
        run: |
          cd frontend && npm test
          cd ../backend && pytest

  deploy:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to Vercel
        run: vercel --prod
      - name: Deploy to Railway
        run: railway up
```

–≠—Ç–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç:
- ‚úÖ –í—ã—Å–æ–∫—É—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
- ‚úÖ –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å
- ‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
- ‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ—Å—Ç—å
- ‚úÖ –¢–µ—Å—Ç–∏—Ä—É–µ–º–æ—Å—Ç—å 
