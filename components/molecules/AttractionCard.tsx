import React from 'react';
import Card from '../atoms/Card';
import Button from '../atoms/Button';

export interface Attraction {
  id: string;
  name: string;
  category: string;
  district: string;
  address: string;
  lat: number;
  lng: number;
  description: string;
  type: 'attraction' | 'shaurma';
  rating: number;
  reviewsCount: number;
  price?: string;
  workingHours?: string;
}

export interface AttractionCardProps {
  attraction: Attraction;
  onClick?: (attraction: Attraction) => void;
  showDetails?: boolean;
}

export const AttractionCard: React.FC<AttractionCardProps> = ({ 
  attraction, 
  onClick, 
  showDetails = false 
}) => {
  const handleClick = () => {
    if (onClick) {
      onClick(attraction);
    }
  };

  const formatRating = (rating: number) => {
    if (rating === 0) return '–ù–µ—Ç –æ—Ü–µ–Ω–æ–∫';
    return `${rating.toFixed(1)} ‚≠ê`;
  };

  const formatReviews = (count: number) => {
    if (count === 0) return '';
    return `(${count} –æ—Ç–∑—ã–≤–æ–≤)`;
  };

  const getTypeIcon = (type: string) => {
    switch (type) {
      case 'attraction': return 'üèõÔ∏è';
      case 'shaurma': return 'üåÆ';
      default: return 'üìç';
    }
  };

  const getTypeLabel = (type: string) => {
    switch (type) {
      case 'attraction': return '–î–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å';
      case 'shaurma': return '–®–∞—É—Ä–º–∞/–§–∞—Å—Ç—Ñ—É–¥';
      default: return '–ú–µ—Å—Ç–æ';
    }
  };

  return (
    <Card className="attraction-card hover:shadow-lg transition-shadow cursor-pointer" onClick={handleClick}>
      <div className="p-4">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div className="flex justify-between items-start mb-3">
          <div className="flex-1">
            <div className="flex items-center space-x-2 mb-1">
              <span className="text-xl">{getTypeIcon(attraction.type)}</span>
              <h3 className="text-lg font-semibold text-gray-900">
                {attraction.name}
              </h3>
            </div>
            <p className="text-sm text-gray-600 mb-1">
              {getTypeLabel(attraction.type)}
            </p>
            <p className="text-xs text-gray-500">
              {attraction.district}
            </p>
          </div>
          <div className="text-right">
            <div className="text-sm font-medium text-gray-900">
              {formatRating(attraction.rating)}
            </div>
            <div className="text-xs text-gray-500">
              {formatReviews(attraction.reviewsCount)}
            </div>
            {attraction.price && (
              <div className="text-xs text-green-600 font-medium mt-1">
                {attraction.price}
              </div>
            )}
          </div>
        </div>

        {/* –ê–¥—Ä–µ—Å */}
        <div className="mb-3">
          <p className="text-sm text-gray-700 flex items-center">
            <span className="mr-2">üìç</span>
            {attraction.address}
          </p>
        </div>

        {/* –û–ø–∏—Å–∞–Ω–∏–µ */}
        <div className="mb-3">
          <p className="text-sm text-gray-600">
            {attraction.description}
          </p>
        </div>

        {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
        {showDetails && (
          <div className="mb-3 space-y-2">
            {attraction.workingHours && (
              <p className="text-sm text-gray-700 flex items-center">
                <span className="mr-2">üïí</span>
                {attraction.workingHours}
              </p>
            )}
            <p className="text-xs text-gray-500">
              –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {attraction.lat.toFixed(6)}, {attraction.lng.toFixed(6)}
            </p>
          </div>
        )}

        {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
        <div className="flex gap-2">
          <Button 
            variant="outline" 
            size="sm"
            onClick={() => {
              const url = `https://yandex.ru/maps/?pt=${attraction.lng},${attraction.lat}&z=16&l=map`;
              window.open(url, '_blank');
            }}
          >
            üó∫Ô∏è –ö–∞—Ä—Ç–∞
          </Button>
          <Button 
            variant="outline" 
            size="sm"
            onClick={() => {
              const url = `https://yandex.ru/search/?text=${encodeURIComponent(attraction.name + ' ' + attraction.address)}`;
              window.open(url, '_blank');
            }}
          >
            üîç –ü–æ–∏—Å–∫
          </Button>
          {attraction.type === 'shaurma' && (
            <Button 
              variant="outline" 
              size="sm"
              onClick={() => {
                const url = `https://yandex.ru/search/?text=${encodeURIComponent('–¥–æ—Å—Ç–∞–≤–∫–∞ ' + attraction.name + ' –í–ª–∞–¥–∏–∫–∞–≤–∫–∞–∑')}`;
                window.open(url, '_blank');
              }}
            >
              üöö –î–æ—Å—Ç–∞–≤–∫–∞
            </Button>
          )}
        </div>
      </div>
    </Card>
  );
};

export default AttractionCard; 